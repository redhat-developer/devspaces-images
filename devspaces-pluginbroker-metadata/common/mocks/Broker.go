// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import event "github.com/eclipse/che-go-jsonrpc/event"
import jsonrpc "github.com/eclipse/che-go-jsonrpc"
import mock "github.com/stretchr/testify/mock"
import model "github.com/eclipse/che-plugin-broker/model"

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// Bus provides a mock function with given fields:
func (_m *Broker) Bus() *event.Bus {
	ret := _m.Called()

	var r0 *event.Bus
	if rf, ok := ret.Get(0).(func() *event.Bus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Bus)
		}
	}

	return r0
}

// CloseConsumers provides a mock function with given fields:
func (_m *Broker) CloseConsumers() {
	_m.Called()
}

// PrintDebug provides a mock function with given fields: format, v
func (_m *Broker) PrintDebug(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// PrintFatal provides a mock function with given fields: format, v
func (_m *Broker) PrintFatal(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// PrintInfo provides a mock function with given fields: format, v
func (_m *Broker) PrintInfo(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// PrintInfoBuffer provides a mock function with given fields: info
func (_m *Broker) PrintInfoBuffer(info []string) {
	_m.Called(info)
}

// PrintPlan provides a mock function with given fields: metas
func (_m *Broker) PrintPlan(metas []model.PluginMeta) {
	_m.Called(metas)
}

// PubDone provides a mock function with given fields: tooling
func (_m *Broker) PubDone(tooling string) {
	_m.Called(tooling)
}

// PubFailed provides a mock function with given fields: err
func (_m *Broker) PubFailed(err string) {
	_m.Called(err)
}

// PubLog provides a mock function with given fields: text
func (_m *Broker) PubLog(text string) {
	_m.Called(text)
}

// PubStarted provides a mock function with given fields:
func (_m *Broker) PubStarted() {
	_m.Called()
}

// PushEvents provides a mock function with given fields: tun, types
func (_m *Broker) PushEvents(tun *jsonrpc.Tunnel, types ...string) {
	_va := make([]interface{}, len(types))
	for _i := range types {
		_va[_i] = types[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tun)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}
