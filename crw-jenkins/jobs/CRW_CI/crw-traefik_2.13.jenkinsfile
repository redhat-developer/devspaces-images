#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
def SOURCE_REPO = "traefik/traefik" 
String SOURCE_BRANCH = "master" // NOTE: can use https://github.com/redhat-developer/traefik/tree/crw-2.y-rhel-8 if need to fork or use a commit that's not behind a tag/branch
//   SOURCE_TAG // the tag of the release to rebuild from upstream
def MIDSTM_REPO = "redhat-developer/codeready-workspaces-images" // repo to use as target
//   MIDSTM_BRANCH
def MIDSTM_NAME="traefik"
//   FORCE_BUILD = "false"
def SYNC_REPO = MIDSTM_NAME
def GOLANG_VERSION = "1.16.2"

def OLD_SOURCE_SHA=""
def OLD_MID_SHA=""
def NEW_MID_SHA=""

// Nodes to run artifact build on ex. ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabelsMultiArch = ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def Map tasks = [failFast: false]

def String nodeLabelAnyArch = "rhel8||rhel83||s390x-rhel8||ppc64le-rhel8"
timeout(120) {
  node(nodeLabelAnyArch) {
    stage ("Sync repos on ${nodeLabelAnyArch}") {
      wrap([$class: 'TimestamperBuildWrapper']) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
      def util = load "${WORKSPACE}/util.groovy"
      cleanWs()
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
          usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
          file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
            util.installSkopeoFromContainer("")
            util.installYq()

            println "########################################################################################################"
            println "##  Clone and update github.com/${SOURCE_REPO}.git"
            println "########################################################################################################"
            SOURCE_DIR="${WORKSPACE}/sources"
            util.cloneRepoWithBootstrap("https://github.com/${SOURCE_REPO}.git", SOURCE_DIR, SOURCE_BRANCH, true)
	    // fetch the correct tag to build
            sh('''#!/bin/bash
            cd ''' + SOURCE_DIR + '''
            git checkout ''' + SOURCE_TAG + '''
            ''')
            OLD_SOURCE_SHA = util.getLastCommitSHA(SOURCE_DIR)
            println "Got OLD_SOURCE_SHA in sources folder: " + OLD_SOURCE_SHA

            println "########################################################################################################"
            println "##  Sync ${SYNC_REPO} to codeready-workspaces-images"
            println "########################################################################################################"
            util.cloneRepoWithBootstrap("https://github.com/${MIDSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH, false)
            TARGET_DIR="${WORKSPACE}/targetdwn/" + util.getCRWLongName(SYNC_REPO)
            OLD_MID_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
            println "Got OLD_SHA in targetdwn/${SYNC_REPO} folder: " + OLD_MID_SHA

            CSV_VERSION = util.getCSVVersion(MIDSTM_BRANCH)
            CSV_VERSION_BASE=CSV_VERSION.replaceAll("([0-9]+\\.[0-9]+)\\.[0-9]+","\$1"); // extract 2.yy from 2.yy.z
            // print "CSV_VERSION_BASE=" + CSV_VERSION_BASE

            // CRW-2039 this can happen if the 2.x jobs have not all run and the operator sources still have the previous release's version
            if (!CSV_VERSION_BASE.equals(CRW_VERSION)) { 
              println "[WARNING] CSV version (from getCSVVersion() -> csv.yaml = " + CSV_VERSION + 
                ") does not match CRW version (from getCrwVersion() -> VERSION = " + CRW_VERSION + ") !"
              CSV_VERSION=CRW_VERSION+".0" // for .x builds, use CRW_VERSION.0
            }
            println("[INFO] Using CSV version = " + CSV_VERSION)

            // rsync files to codeready-workspaces-images, and transform them
            sh('''#!/bin/bash -xe
cd ''' + TARGET_DIR + ''' && ./build/scripts/sync.sh -v ''' + CSV_VERSION + ''' -s ''' + SOURCE_DIR + ''' -t ''' + TARGET_DIR
            )

            // push changes to codeready-workspaces-images
            util.updateBaseImages(TARGET_DIR, MIDSTM_BRANCH, "--nocommit " + util.globalVar({UPDATE_BASE_IMAGES_FLAGS}))
            util.installHub("2.14.2", GOLANG_VERSION) // for publishing asset files to GH releases
            sh('''#!/bin/bash -xe
cd ${WORKSPACE}/targetdwn
git add ''' + util.getCRWLongName(SYNC_REPO) + '''
git update-index --refresh || true # ignore timestamp updates
DELETE_OLD_ASSETS=0
if [[ \$(git diff-index HEAD --) ]]; then # file changed
  cd ''' + TARGET_DIR + '''
  git add . -A -f
  # note this might fail if we're syncing from a tag vs. a branch
  git commit -s -m "ci: [sync] Update from ''' + SOURCE_REPO + ''' @ ''' + OLD_SOURCE_SHA + '''" Dockerfile . || true
  git pull origin ''' + MIDSTM_BRANCH + ''' || true
  git push origin ''' + MIDSTM_BRANCH + ''' || true
  DELETE_OLD_ASSETS=1
fi
if [[ $DELETE_OLD_ASSETS -eq 1 ]] || [[ "''' + FORCE_BUILD + '''" == "true" ]]; then
  curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'''+ MIDSTM_BRANCH + '''/product/uploadAssetsToGHRelease.sh && \
  chmod +x ./uploadAssetsToGHRelease.sh
  # delete existing release & tag & assets -- this will remove everything for each push for each arch, so do it BEFORE we do the multiarch parallel loop
  ./uploadAssetsToGHRelease.sh --delete-assets -v "''' + CSV_VERSION + '''" -b "'''+MIDSTM_BRANCH+'''" --asset-name "''' + SYNC_REPO  +'''"
fi
            ''')
            NEW_MID_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
            println "Got NEW_MID_SHA in targetdwn folder: " + NEW_MID_SHA
            currentBuild.description="Upstream sync done"
        } // withCredentials
      } // wrap
    } // stage
  } // node
} // timeout

for (int i=0; i < nodeLabelsMultiArch.size(); i++) {
  def String nodeLabelMultiArch = "${nodeLabelsMultiArch[i]}"
  print "[" + (i+1) + "/" + nodeLabelsMultiArch.size() + "] Create task to run on ${nodeLabelMultiArch}"
  tasks[nodeLabelsMultiArch[i]] = { ->
    timeout(120) {
        node(nodeLabelMultiArch) {
            stage("Build artifacts on " + nodeLabelMultiArch) {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    util.installSkopeoFromContainer("")
                    util.installYq()
                    util.installPodman2()
                    util.installHub("2.14.2", GOLANG_VERSION) // for publishing asset files to GH releases
                    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                        usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
                        file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                        // build project in Jenkins so we can collect asset-* files later via get-sources-jenkins.sh, then trigger a build brew with those files
                        if (!NEW_MID_SHA.equals(OLD_MID_SHA) || FORCE_BUILD.equals("true")) {
                            util.cloneRepoWithBootstrap("https://github.com/${MIDSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH, false)
                            TARGET_DIR="${WORKSPACE}/targetdwn/" + util.getCRWLongName(SYNC_REPO)
                            util.loginToRegistries()
                            sh('''#!/bin/bash -xe
cd ''' + TARGET_DIR + ''' && ./build/rhel.binary.build.sh -v ''' + CSV_VERSION + ''' -b ''' + MIDSTM_BRANCH + '''
                            ''')
                            currentBuild.description+="; New ${nodeLabelMultiArch} artifacts built"
                        } else {
                            println "No changes upstream, nothing to build in Jenkins!"
                            currentBuild.description+="; No new ${nodeLabelMultiArch} artifacts"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } // withCredentials
                } // wrap
            } // stage
        } // node
    } // timeout
  } // tasks
} // for

stage("Builds") {
  println "########################################################################################################"
  println "##  Build ${SYNC_REPO} assets"
  println "########################################################################################################"
  parallel(tasks)
}

node(nodeLabelAnyArch) {
  stage ("Build containers on ${nodeLabelAnyArch}") {
    println "########################################################################################################"
    println "##  Trigger sync to downstream job"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
        if (!NEW_MID_SHA.equals(OLD_MID_SHA) || FORCE_BUILD.equals("true")) {
          JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
          build(
              job: 'sync-to-downstream_' + JOB_BRANCH,
              wait: true,
              propagate: true,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: SYNC_REPO + "+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'REPOS',
                  value: util.getCRWLongName(SYNC_REPO)
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: JOB_BRANCH
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'UPDATE_BASE_IMAGES_FLAGS',
                  value: util.globalVar({UPDATE_BASE_IMAGES_FLAGS})
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'MIDSTM_BRANCH',
                  value: MIDSTM_BRANCH
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: true
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
            )
          currentBuild.description+="; Downstream sync job triggered"
        } else {
          println "No changes upstream, nothing to sync / build in brew!"
          currentBuild.description+="; No sync or Brew build"
          currentBuild.result = 'UNSTABLE'
        }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
