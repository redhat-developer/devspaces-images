#!/usr/bin/env groovy

import hudson.FilePath
import groovy.transform.Field

// PARAMETERS for this pipeline:
// mailSubject
// errataURL
// epicURL
// additionalNotes
// doSendEmail
// RECIPIENTS
// MIDSTM_BRANCH

def sendMail(mailSubject,mailBody) {
    def sender="nboldt@redhat.com" // # use a bot instead?
    emailext(
        subject: mailSubject,
        body: mailBody, 
        from: sender,
        to: RECIPIENTS,
        recipientProviders: [requestor()]
    )
}

def checkFailure(arrayLines,serverName,errorOccurred)
{
    arrayLines.each  { 
        line -> if (line?.toString().indexOf("No tags matching")>-1 || line?.toString().indexOf("ERROR")>-1) { 
            errorOccurred = errorOccurred + line + '\n'; 
            currentBuild.result = 'FAILURE'
        }
    }
    return errorOccurred
}

def errorOccurred = ""

def nodeLabel = "x86_64-rhel8||x86_64-rhel8||s390x-rhel8||ppc64le-rhel8"
timeout(90) {
    node("${nodeLabel}"){ 
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
            def util = load "${WORKSPACE}/util2.groovy"
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
            CSV_VERSION = util.getCSVVersion(MIDSTM_BRANCH)
            try { 
                stage "Fetch latest image tags and send email"
                cleanWs()
                MMdd = ""+(new java.text.SimpleDateFormat("MM-dd")).format(new Date())
                if (mailSubject.contains("CRW " + CSV_VERSION + ".tt-" + MMdd + " ready for QE") || mailSubject.equals(""))
                {
                    doSendEmail="false"
                    errorOccurred = errorOccurred + 'Error: need to set an actual email subject. Failure!\n'
                    currentBuild.description="Invalid email subject!"
                    currentBuild.result = 'FAILURE'
                } else {
                    currentBuild.description=mailSubject
                    sh (
                        script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+MIDSTM_BRANCH+'/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh',
                        returnStdout: true).trim().split( '\n' )
                    sh (
                        script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+MIDSTM_BRANCH+'/product/getTagForImage.sh && chmod +x getTagForImage.sh',
                        returnStdout: true).trim().split( '\n' )
                    def NEW_QUAY = ""
                    def NEW_NVR = ""
                    parallel quay_check: {
                        NEW_QUAY = sh (
                            script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --quay --tag ${CRW_VERSION}- --hide | tee ${WORKSPACE}/LATEST_IMAGES.quay",
                            returnStdout: true).trim().split( '\n' )
                            errorOccurred = checkFailure(NEW_QUAY, "Quay", errorOccurred)
                    }, 
                    nvr_check: {
                        NEW_NVR = sh (
                            script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --nvr --hide | tee ${WORKSPACE}/LATEST_IMAGES.nvr",
                            returnStdout: true).trim().split( '\n' )
                    }

                    // diff quay tag list vs. nvr tag list
                    sh(script: '''#!/bin/bash -xe
        ${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.quay) -s > ${WORKSPACE}/LATEST_IMAGES.quay.tagsonly
        ${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.nvr)  -s > ${WORKSPACE}/LATEST_IMAGES.nvr.tagsonly
        ''', returnStdout: true)
                    def DIFF_LATEST_IMAGES_QUAY_V_NVR = sh (
                        script: 'diff -u0 ${WORKSPACE}/LATEST_IMAGES.{quay,nvr}.tagsonly | grep -v "@@" | grep -v "LATEST_IMAGES" || true',
                        returnStdout: true
                    ).trim()

                    archiveArtifacts fingerprint: false, artifacts:"LATEST_IMAGES*"
                    if (!DIFF_LATEST_IMAGES_QUAY_V_NVR.equals("")) {
                        // error! quay and nvr versions do not match
                        errorOccurred = errorOccurred + 'Error: Quay & Brew image versions not aligned:\n' + 
                        "=================== QUAY v NVR ===================\n" + 
                        DIFF_LATEST_IMAGES_QUAY_V_NVR + '\n' + 
                        ' Failure!\n'
                        currentBuild.description="Quay/Brew version mismatch!"
                        currentBuild.result = 'FAILURE'

                        // trigger a push of latest images in Brew to Quay
                        build job: "push-latest-containers-to-quay_${MIDSTM_BRANCH}", 
                            parameters: [[$class: 'StringParameterValue', name: 'MIDSTM_BRANCH', value: "${MIDSTM_BRANCH}"]],
                            propagate: false,
                            wait: true

                        // trigger an update of metadata and registries
                        build job: "update-digests-in-metadata_${MIDSTM_BRANCH}",
                            parameters: [[$class: 'StringParameterValue', name: 'MIDSTM_BRANCH', value: "${MIDSTM_BRANCH}"]],
                            propagate: false,
                            wait: true
                    }

                    def NEW_QUAY_L=""; NEW_QUAY.each { line -> if (line?.trim()) { NEW_QUAY_L=NEW_QUAY_L+"- ${line}\n" } }
                    def NEW_NVR_L="";  NEW_NVR.each  { line -> if (line?.trim()) { NEW_NVR_L=NEW_NVR_L + "  ${line}\n" } } 

                    def mailBody = mailSubject

                    if (!additionalNotes.equals("")) {
                        mailBody = mailBody + '''
---------------

''' + additionalNotes + '''

---------------
'''
                    }

                    mailBody = mailBody + '''
Latest crwctl builds:

''' + JENKINS_URL + '''job/CRW_CI/job/crwctl_''' + JOB_BRANCH + '''/lastSuccessfulBuild/artifact/codeready-workspaces-chectl/dist/channels/
- or -
https://github.com/redhat-developer/codeready-workspaces-chectl/releases (if copied there)

Quay Images:
''' + NEW_QUAY_L

                    mailBody = mailBody + '''
Brew NVRs (for use in ''' + errataURL + '''):
''' + NEW_NVR_L

                    IIB_INFO = sh (
                        script: '''
CRW_VERSION="'''+CRW_VERSION+'''"
for csv in operator-bundle; do 
    lastcsv=$(curl -sSLk "https://datagrepper.engineering.redhat.com/raw?topic=/topic/VirtualTopic.eng.ci.redhat-container-image.index.built&delta=1728000&rows_per_page=30&contains=codeready-workspaces" | \
        jq ".raw_messages[].msg.index | .added_bundle_images[0]" -r | sort -uV | \
        grep "${csv}:${CRW_VERSION}" | tail -1 | sed -r -e "s#registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-##");
    curl -sSLk "https://datagrepper.engineering.redhat.com/raw?topic=/topic/VirtualTopic.eng.ci.redhat-container-image.index.built&delta=1728000&rows_per_page=30&contains=codeready-workspaces" | \
        jq ".raw_messages[].msg.index | [.added_bundle_images[0], .index_image, .ocp_version] | @tsv" -r | sort -uV | \
        grep "${lastcsv}" | sed -r -e "s#registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-#  #";echo
done
                        ''',
                        returnStdout: true
                    ).trim()

                    mailBody = mailBody + '''
Bundle Image, Index Image, OCP Version:
  ''' + IIB_INFO + '''

(queried with: 
    CRW_VERSION="'''+CRW_VERSION+'''"
    for csv in operator-bundle; do 
        lastcsv=$(curl -sSLk "https://datagrepper.engineering.redhat.com/raw?topic=/topic/VirtualTopic.eng.ci.redhat-container-image.index.built&delta=1728000&rows_per_page=30&contains=codeready-workspaces" | \
            jq ".raw_messages[].msg.index | .added_bundle_images[0]" -r | sort -uV | \
            grep "${csv}:${CRW_VERSION}" | tail -1 | sed -r -e "s#registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-##");
        curl -sSLk "https://datagrepper.engineering.redhat.com/raw?topic=/topic/VirtualTopic.eng.ci.redhat-container-image.index.built&delta=1728000&rows_per_page=30&contains=codeready-workspaces" | \
            jq ".raw_messages[].msg.index | [.added_bundle_images[0], .index_image, .ocp_version] | @tsv" -r | sort -uV | \
            grep "${lastcsv}" | sed -r -e "s#registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-#  #"
        echo
    done
)
'''

                    mailBody = mailBody + '''
Unresolved feature requests for ''' + CRW_VERSION + ''':
  https://issues.redhat.com/issues/?jql=fixversion%20%3D%20''' + CRW_VERSION +
'''.0.GA%20AND%20project%20%3D%20CRW%20and%20issuetype%20%3D%20%22Feature%20Request%22%20and%20resolution%20%3D%20null%20order%20by%20priority

Unresolved blockers + criticals for ''' + CRW_VERSION + ''':
  https://issues.redhat.com/issues/?jql=fixversion%20%3D%20''' + CRW_VERSION +
'''.0.GA%20AND%20project%20%3D%20CRW%20AND%20priority%20%3E%20Major%20AND%20resolution%20is%20null%20order%20by%20priority
'''

                    mailBody = mailBody + '''
---------------
Generated by ''' + BUILD_URL + '''
'''

                    echo "Subject: " + mailSubject + "\n\n" +
    "Body: \n" +  
    "============================================================\n" + 
    mailBody + 
    "\n============================================================\n"

                    if (doSendEmail.equals("true") && errorOccurred.equals(""))
                    {
                        sendMail(mailSubject,mailBody)
                    }
                }
                if (!errorOccurred.equals("")) {
                    echo errorOccurred
                }
            } catch (e) {
                if (!errorOccurred.equals("")) {
                    echo errorOccurred
                    return
                }
                throw e
            }
        } // withCreds
    } // node
} // timeout