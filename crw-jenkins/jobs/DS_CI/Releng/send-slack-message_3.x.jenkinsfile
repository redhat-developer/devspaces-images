#!/usr/bin/env groovy

import hudson.FilePath
import groovy.transform.Field

// PARAMETERS for this pipeline:
// OCP_VERSIONS
// MIDSTM_BRANCH
// errataURL
// epicURL

def sendSlack(slackTitle,slackText,slackChannel) {
    def message = [
        title: slackTitle,
        text: slackText,
        footer: "Jenkins Pipeline",
        ts: System.currentTimeMillis() / 1000
    ]

    slackSend(channel: slackChannel, attachments: [message])
}

def checkFailure(arrayLines,serverName,errorOccurred)
{
    arrayLines.each  { 
        line -> if (line?.toString().indexOf("No tags matching")>-1 || line?.toString().indexOf("ERROR")>-1) { 
            errorOccurred = errorOccurred + line + '\n'; 
            currentBuild.result = 'FAILURE'
        }
    }
    return errorOccurred
}

def errorOccurred = ""

def String nodeLabel = '(x86_64-rhel8||ppc64le-rhel8)'
timeout(90) {
    node(nodeLabel) {
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
            def util = load "${WORKSPACE}/util2.groovy"
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            DS_VERSION = util.getDsVersion(MIDSTM_BRANCH)
            CSV_VERSION = util.getCSVVersion(MIDSTM_BRANCH)
            try { 
                stage "Fetch latest image tags and send slack message"
                cleanWs()

                sh (
                    script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+MIDSTM_BRANCH+'/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh',
                    returnStdout: true).trim().split( '\n' )
                sh (
                    script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+MIDSTM_BRANCH+'/product/getTagForImage.sh && chmod +x getTagForImage.sh',
                    returnStdout: true).trim().split( '\n' )

                def NEW_QUAY = ""
                def NEW_NVR = ""

                parallel quay_check: {
                    NEW_QUAY = sh (
                        script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --quay --tag ${DS_VERSION}- --hide | tee ${WORKSPACE}/LATEST_IMAGES.quay",
                        returnStdout: true).trim().split( '\n' )
                        errorOccurred = checkFailure(NEW_QUAY, "Quay", errorOccurred)
                    }, 
                    nvr_check: {
                        NEW_NVR = sh (
                        script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --nvr --hide | tee ${WORKSPACE}/LATEST_IMAGES.nvr",
                        returnStdout: true).trim().split( '\n' )
                    }

                sh(script: '''#!/bin/bash -xe
${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.quay) -s > ${WORKSPACE}/LATEST_IMAGES.quay.tagsonly
${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.nvr)  -s > ${WORKSPACE}/LATEST_IMAGES.nvr.tagsonly
''', returnStdout: true)

                // diff quay tag list vs. nvr tag list
                def DIFF_LATEST_IMAGES_QUAY_V_NVR = sh (
                    script: 'diff -u0 ${WORKSPACE}/LATEST_IMAGES.{quay,nvr}.tagsonly | grep -v "@@" | grep -v "LATEST_IMAGES" || true',
                    returnStdout: true
                ).trim()

                if (!DIFF_LATEST_IMAGES_QUAY_V_NVR.equals("")) {
                    // error! quay and nvr versions do not match
                    errorOccurred = errorOccurred + 'Error: Quay & Brew image versions not aligned:\n' + 
                    "=================== QUAY v NVR ===================\n" + 
                    DIFF_LATEST_IMAGES_QUAY_V_NVR + '\n' + 
                    ' Failure!\n'
                    currentBuild.description="Quay/Brew version mismatch!"
                    currentBuild.result = 'FAILURE'

                    // trigger a push of latest images in Brew to Quay
                    build job: "push-latest-containers-to-quay_${JOB_BRANCH}", 
                        parameters: [[$class: 'StringParameterValue', name: 'MIDSTM_BRANCH', value: "${MIDSTM_BRANCH}"]],
                        propagate: false,
                        quietPeriod: 0,
                        wait: true

                    // trigger an update of metadata and registries
                    build job: "update-digests_${JOB_BRANCH}",
                        parameters: [[$class: 'StringParameterValue', name: 'MIDSTM_BRANCH', value: "${MIDSTM_BRANCH}"]],
                        propagate: false,
                        quietPeriod: 0,
                        wait: true
                }

                def NEW_QUAY_L=""; NEW_QUAY.each { line -> if (line?.trim()) { NEW_QUAY_L=NEW_QUAY_L+"- ${line}\n" } }
                def NEW_NVR_L="";  NEW_NVR.each  { line -> if (line?.trim()) { NEW_NVR_L=NEW_NVR_L + "  ${line}\n" } } 

                slackText = '''
Latest dsc binaries:

  https://quay.io/devspaces/dsc:''' + DS_VERSION + '''

  To install, see https://quay.io/repository/devspaces/dsc?tab=info

Quay Images:
''' + NEW_QUAY_L

                slackText = slackText + '''
Brew NVRs:
''' + NEW_NVR_L

                whichBundle="operator-bundle"
                // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
                // NOTE: similar code in send-email-qe-build-list*.jenkinsfile and copyIIBsToQuay*.jenkinsfile
                // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
                println "####################################################################################################################"
                println "##  Check registry-proxy.engineering.redhat.com/rh-osbs/iib for " + whichBundle + " ${DS_VERSION}, for OCP ${OCP_VERSIONS}"
                println "####################################################################################################################"

                // $âž” ./getLatestImageTags.sh -b devspaces-3.0-rhel-8 --osbs --hide -c devspaces-operator-bundle --tag 3.0-
                // registry-proxy.engineering.redhat.com/rh-osbs/devspaces-operator-bundle:3.0-75
                def latestBundleImage = sh(script: '''#!/bin/bash
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/''' + MIDSTM_BRANCH + '''/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh
./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --osbs --hide -c devspaces-''' + whichBundle + ''' --tag ''' + DS_VERSION + '''-
''', returnStdout: true).trim()

                // registry-proxy.engineering.redhat.com/rh-osbs/iib:277491 (v4.11)
                // registry-proxy.engineering.redhat.com/rh-osbs/iib:277488 (v4.10) 
                def IIBs = sh(script: '''#!/bin/bash -xe
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/''' + MIDSTM_BRANCH + '''/product/getLatestIIBs.sh && chmod +x getLatestIIBs.sh
for OCP_VER in ''' + OCP_VERSIONS + '''; do
    ./getLatestIIBs.sh --ds -t ''' + DS_VERSION + ''' -o ${OCP_VER} -i ''' + latestBundleImage + ''' | sed -r \
        -e "s#''' + latestBundleImage + '''\\t+##" \
        -e "s#(.+)\\t(.+)#\\1 (\\2)#"
done
''', returnStdout: true)

                // if we got the right number of values (matching number of OCP versions)
                if (IIBs?.trim() && OCP_VERSIONS?.trim() && IIBs?.trim().split("\n").length == OCP_VERSIONS?.trim().split(" ").length) { 
                    println "####################################################################################################################FOUND"
                    println "##  IIB(s) found for latest " + whichBundle + " ${DS_VERSION}:"
                    println "## " + IIBs.trim().replaceAll("\n", "\n## ")
                    println "####################################################################################################################FOUND\n"
                    currentBuild.description="" + IIBs?.trim().split("\n").length + " IIB(s) found: "
                    currentBuild.description+="<br/>* " + IIBs.trim().replaceAll("\n", "<br/>* ")

                    // // // // // // // // // // // // // // // // // // // // // 
                    // CRW-3219 copy IIBs to Quay, including ER or RC tagged images  (4 tags per IIB per OCP version)
                    // // // // // // // // // // // // // // // // // // // // // 
                    // requires opm binary to filter & copy IIB images to quay, running on all arches

                    nodeLabelString = sh( 
                    script: '''
curl -sSLo- https://raw.githubusercontent.com/redhat-developer/devspaces-images/''' + MIDSTM_BRANCH + '''/devspaces-''' + whichBundle + '''/container.yaml | yq -r '.platforms.only[]' 
                    ''', returnStdout: true).trim()
                    currentBuild.description+="<br/>arches = " + nodeLabelString.replaceAll("\n",", ") + "; "
                } else { // could not find the correct number of published IIBs in rh-osbs registry
                    currentBuild.description+="; ERROR: missing rh-osbs/iib for " + latestBundleImage
                    if (IIBs?.trim().split("\n").length > 0) { 
                        currentBuild.description+=" - " + IIBs?.trim().split("\n").length + " of " + OCP_VERSIONS?.trim().split(" ").length + " found: "
                        currentBuild.description+="<br/>* " + IIBs?.trim().replaceAll("\n", "<br/>* ")
                    }
                    currentBuild.result = 'FAILURE'
                }

                slackText = slackText + '''
OSBS Index Images (IIB) by OCP Version:
* ''' + IIBs.trim().replaceAll("\n", "\n* ")

                if (errataURL?.trim()) {
                    slackText = slackText + '''
Advisory: ''' + errataURL
                }
                if (epicURL?.trim()) {
                    slackText = slackText + '''
Epic: ''' + epicURL
                }

                imageName = (latestBundleImage.split("/"))[-1]
                slackTitle = "New DS bundle " + imageName + " is available."

                sendSlack(slackTitle,slackText,"devspaces-ci")
            } catch (e) {
                if (!errorOccurred.equals("")) {
                    echo errorOccurred
                    return
                }
                throw e
            } // try-catch
        } // withCreds
    } // node
} // timeout
