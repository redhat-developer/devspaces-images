#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
    // MIDSTM_BRANCH
    // CLEAN_ON_FAILURE = "true"

def errorOccurred = false
def String nodeLabel = 'x86_64-rhel8||ppc64le-rhel8'
timeout(240) {
    node(nodeLabel){ 
        try { 
            stage ("Check for updated images") {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
                        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
                        def util = load "${WORKSPACE}/util2.groovy"
                        cleanWs()

                        // comment on the PR with links to this job
                        if (util.globalVar({comments_url})?.trim()) {
                            println("Used PR comment URL: " + util.commentOnPullRequestBuildLinks(util.globalVar({comments_url})))
                        }

                        DS_VERSION = util.getDsVersion(MIDSTM_BRANCH)
                        println "DS_VERSION = '" + DS_VERSION + "'"
                        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
                        util.cloneRepo("https://github.com/redhat-developer/devspaces.git", "devspaces", MIDSTM_BRANCH, false)

                        def NEW_IMAGES = sh (
                            script: "cd ${WORKSPACE}/devspaces/product && ./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --quay --tag ${DS_VERSION}- --hide | tee ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.new",
                            returnStdout: true
                        ).trim().split()

                        // check for Quay outage
                        if (NEW_IMAGES.toString().indexOf("No tags matching")>-1)
                        {
                            errorOccurred = true
                            error('Missing tags when reading from quay.io: may be experiencing an outage. Abort!')
                            currentBuild.result = 'ABORTED'
                        }
                        echo "------"
                        def CURRENT_IMAGES = sh (
                            script: 'cat ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES',
                            returnStdout: true
                        ).trim().split()
                
                        sh '''#!/bin/bash -xe
cp ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES{,.prev}
echo "============ LATEST_IMAGES.prev ============>"
cat ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.prev
echo "<============ LATEST_IMAGES ============"
NUM_IMAGES=$(cat ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.prev | wc -l)
if [[ NUM_IMAGES -lt 1 ]]; then 
    echo "ERROR: dependencies/LATEST_IMAGES.prev file is empty!"
    exit 1
else 
    echo "Found $NUM_IMAGES images in dependencies/LATEST_IMAGES.prev"
fi
'''

                        // compare new and curent images
                        def newSet = NEW_IMAGES as Set
                        // def currentSet = CURRENT_IMAGES as Set
                        def operatorBundleImage = newSet.find { it.contains("operator-bundle") } 
                        // newSet.each { echo "New: $it" }
                        // currentSet.each { echo "Current: $it" }
                        sh '''#!/bin/bash -xe
echo "============ LATEST_IMAGES.new 1 ============>"
cat ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.new
echo "<============ LATEST_IMAGES.new 1 ============"
NUM_IMAGES=$(cat ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.new | wc -l)
if [[ NUM_IMAGES -lt 1 ]]; then 
    echo "ERROR: dependencies/LATEST_IMAGES.new file is empty!"
    exit 1
else 
    echo "Found $NUM_IMAGES images in dependencies/LATEST_IMAGES.new"
fi
'''

                        // don't report a diff when new operator-bundle, or we'll never get out of this recursion loop; instead report new images (anything that will cause a new bundle image to be rebuilt)
                        def DIFF_LATEST_IMAGES_ANY_BUT_BUNDLE = sh (script: '''
diff -u0 ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.{prev,new} | \
grep -E -v "@@|dependencies/LATEST_IMAGES|operator-bundle" | \
sed -r -e "s@quay.io/devspaces/|:.+|-rhel8|\\n|\\r|^(-|\\+)@@g" | sort -uV || true
                        ''', returnStdout: true).trim()

                        // check diff including operator bundle, in case we forgot to update
                        def DIFF_LATEST_IMAGES_BUNDLE_ONLY = sh (script: '''
diff -u0 ${WORKSPACE}/devspaces/dependencies/LATEST_IMAGES.{prev,new} | \
grep -E -v "@@|dependencies/LATEST_IMAGES" | grep -E "operator-bundle" | \
sed -r -e "s@quay.io/devspaces/|:.+|-rhel8|\\n|\\r|^(-|\\+)@@g" | sort -uV || true
                        ''', returnStdout: true).trim()

                        // define what to do when we are ready to push changes
                        def COMMITCHANGES = '''#!/bin/bash -xe
                            pushd ${WORKSPACE}/devspaces >/dev/null

                            # clean up unneeded files
                            rm -f ./dependencies/LATEST_IMAGES{.new,.prev}

                            # regenerate LATEST_IMAGES, LATEST_IMAGES_COMMITS, and LATEST_IMAGES_DIGESTS.json
                            ./dependencies/LATEST_IMAGES.sh --commit

                            echo "============ LATEST_IMAGES new 2 ============>"
                            cat dependencies/LATEST_IMAGES
                            echo "<============ LATEST_IMAGES new 2 ============"

                            popd >/dev/null
                        '''

                        currentBuild.description="Checking for changed images..."

                        if (!DIFF_LATEST_IMAGES_BUNDLE_ONLY.equals("") && DIFF_LATEST_IMAGES_ANY_BUT_BUNDLE.equals("")) { 
                            // no changes, but a newer bundle image exists
                            currentBuild.description="New bundle image detected: commit changes to LATEST_IMAGES"
                            echo currentBuild.description
                            echo DIFF_LATEST_IMAGES_BUNDLE_ONLY

                            sh COMMITCHANGES
                            currentBuild.result='UNSTABLE'
                        } else if (DIFF_LATEST_IMAGES_ANY_BUT_BUNDLE.equals("")) { 
                            // no changes
                            currentBuild.description="No new images detected: nothing to do!"
                            echo currentBuild.description
                            currentBuild.result='UNSTABLE'
                        } else {
                            currentBuild.description="Detected new images: rebuild operator-bundle<br/>* " + DIFF_LATEST_IMAGES_ANY_BUT_BUNDLE.replaceAll('\n',"<br/>* ")
                            echo currentBuild.description
                            echo DIFF_LATEST_IMAGES_ANY_BUT_BUNDLE

                            jobPath='/job/DS_CI/job/operator-bundle_' + JOB_BRANCH
                            final jobResult = build(
                                job: jobPath.replaceAll("/job/","/"),
                                wait: true,
                                propagate: true,
                                quietPeriod: 0,
                                parameters: [
                                    [
                                        $class: 'StringParameterValue',
                                        name: 'comments_url',
                                        value: util.globalVar({comments_url})
                                    ],
                                    [
                                        $class: 'StringParameterValue',
                                        name: 'token',
                                        value: "CI_BUILD"
                                    ],
                                    [
                                        $class: 'StringParameterValue',
                                        name: 'cause',
                                        value: "update+digests+for+"+DIFF_LATEST_IMAGES_ANY_BUT_BUNDLE.replaceAll("\n", "+").replaceAll(" ", "+")
                                    ],
                                    [
                                        $class: 'BooleanParameterValue', 
                                        name: 'FORCE_BUILD', 
                                        value: true
                                    ]
                                ]
                            )
                            jobLink=jobPath + "/" +  jobResult?.number?.toString()
                            println("waiting for build(" + jobPath + ")")
                            println("++> Job ${JENKINS_URL}${jobLink}/console completed.")
                            currentBuild.description+="; <a href=${jobLink}/>" + (jobLink.replaceAll("/job/","/")) + "</a> triggered" 

                            while (true) 
                            {
                                def rebuiltOperatorBundleImage = sh (
                                script: "cd ${WORKSPACE}/devspaces/product && ./getLatestImageTags.sh -b ${MIDSTM_BRANCH} -c 'devspaces/devspaces-operator-bundle' --quay --tag ${DS_VERSION}- --hide",
                                returnStdout: true
                                ).trim()
                                println "${rebuiltOperatorBundleImage}"
                                if (rebuiltOperatorBundleImage!=operatorBundleImage) {
                                    println "Operator bundle has been rebuilt!"
                                    break
                                }
                                sleep(time:120,unit:"SECONDS")
                            }

                            sh COMMITCHANGES
                        }

                        // comment on the PR with this job's build description
                        if (util.globalVar({comments_url})?.trim()) {
                            println("Used PR comment URL: " + util.commentOnPullRequestBuildDescription(util.globalVar({comments_url})))
                        }
                    } // with
                } // wrap
                cleanWs(
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: true,
                    cleanWhenNotBuilt: false,
                    cleanWhenFailure: CLEAN_ON_FAILURE,
                    cleanWhenAborted: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true
                )
            } // stage
        } catch (e) {
            if (errorOccurred) {
                withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
                    def util = load "${WORKSPACE}/util2.groovy"
                    if (util.globalVar({comments_url})?.trim()) {
                        println("Used PR comment URL: " + util.commentOnPullRequestBuildDescription(util.globalVar({comments_url})))
                    }
                    util.notifyBuildFailed(currentBuild.description)
                }
                return
            }
            throw e
        } // try-catch
    } // node
} // timeout